name: Build Windows EXE

on:
  push:
    tags:
      - 'v*'            # build only when pushing a tag like v0.9.115
  workflow_dispatch:     # optional: allow manual runs from Actions tab

permissions:
  contents: write        # needed for creating a release

jobs:
  build-windows:
    name: Build Windows binary
    runs-on: windows-latest
    # extra guard: run on tags starting with v OR when manually dispatched
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    env:
      APP_NAME: rf2k-trainer
      ENTRYPOINT: main.py

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Build with PyInstaller (collect all pyfiglet)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --clean --onefile --console `
            --collect-all pyfiglet `
            --name $env:APP_NAME $env:ENTRYPOINT
          if (!(Test-Path "dist\$env:APP_NAME.exe")) { throw "EXE was not created" }

      - name: Prepare runtime files for smoke test
        shell: pwsh
        run: |
          if (!(Test-Path "settings.example.yml")) { throw "settings.example.yml not found in repository root" }
          Copy-Item -LiteralPath "settings.example.yml" -Destination "settings.yml" -Force
          New-Item -ItemType Directory -Force -Path "logs" | Out-Null

      - name: Smoke test EXE (non-interactive)
        shell: pwsh
        run: |
          $exe = Join-Path -Path "dist" -ChildPath "$env:APP_NAME.exe"
          if (!(Test-Path $exe)) { throw "EXE missing after build" }
          $env:NO_FIGLET = '1'
          "N" | & $exe --info
          if ($LASTEXITCODE -ne 0) { throw "Non-zero exit code: $LASTEXITCODE" }

      - name: Prepare package
        id: pack
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "package" | Out-Null
          Copy-Item "dist\$env:APP_NAME.exe" "package\$env:APP_NAME.exe"
          if (Test-Path "README.md")     { Copy-Item "README.md" "package\README.md" }
          elseif (Test-Path "README.MD") { Copy-Item "README.MD" "package\README.MD" }
          if (Test-Path "CHANGELOG.md")     { Copy-Item "CHANGELOG.md" "package\CHANGELOG.md" }
          elseif (Test-Path "CHANGELOG.MD") { Copy-Item "CHANGELOG.MD" "package\CHANGELOG.MD" }
          if (Test-Path "settings.example.yml") { Copy-Item "settings.example.yml" "package\settings.example.yml" }
          if (Test-Path "rf2k-trainer.bat") { Copy-Item "rf2k-trainer.bat" "package\rf2k-trainer.bat" }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "package\LICENSE" }
          # Bundle required bandplan/alignment data files
          if (Test-Path "iaru_region_1.yml") { Copy-Item "iaru_region_1.yml" "package\iaru_region_1.yml" }
          if (Test-Path "iaru_region_2.yml") { Copy-Item "iaru_region_2.yml" "package\iaru_region_2.yml" }
          if (Test-Path "iaru_region_3.yml") { Copy-Item "iaru_region_3.yml" "package\iaru_region_3.yml" }
          if (Test-Path "rf2k_segment_alignment.yml") { Copy-Item "rf2k_segment_alignment.yml" "package\rf2k_segment_alignment.yml" }
          $version = "${{ github.ref_name }}"
          if (-not $version -or -not $version.StartsWith("v")) { $version = "dev-${{ github.run_number }}" }
          $zipName = "$env:APP_NAME" + "_" + $version + "_win64.zip"
          Compress-Archive -Path "package\*" -DestinationPath $zipName
          "zip_name=$zipName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: |
            dist/${{ env.APP_NAME }}.exe
            ${{ steps.pack.outputs.zip_name }}

      - name: Release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/${{ env.APP_NAME }}.exe
            ${{ steps.pack.outputs.zip_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

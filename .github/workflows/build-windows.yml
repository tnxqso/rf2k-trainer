name: Build Windows EXE

on:
  # Build on version tags (e.g. v0.9.202) and allow manual runs
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-windows-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-windows:
    name: Build Windows installer
    runs-on: windows-latest

    env:
      APP_NAME: rf2k-trainer
      ENTRYPOINT: main.py
      ICON_PATH: assets\icons\rf2k-trainer.ico
      ISS_SCRIPT: rf2k-trainer.iss

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Verify required files exist
        shell: pwsh
        run: |
          if (!(Test-Path $env:ICON_PATH)) { throw "Icon not found: $env:ICON_PATH" }
          if (!(Test-Path $env:ISS_SCRIPT)) { throw "Inno Setup script not found: $env:ISS_SCRIPT" }
          @(
            "settings.example.yml",
            "iaru_region_1.yml",
            "iaru_region_2.yml",
            "iaru_region_3.yml",
            "rf2k_segment_alignment.yml"
          ) | ForEach-Object {
            if (!(Test-Path $_)) { throw "Required data file missing: $_" }
          }

      - name: Build one-file EXE with PyInstaller (embed icon, collect pyfiglet)
        shell: pwsh
        run: |
          pyinstaller --noconfirm --clean --onefile --console `
            --collect-all pyfiglet `
            --icon "$env:ICON_PATH" `
            --name "$env:APP_NAME" `
            "$env:ENTRYPOINT"
          if (!(Test-Path "dist\$env:APP_NAME.exe")) { throw "EXE was not created" }

      - name: Smoke test EXE (non-interactive --info)
        shell: pwsh
        run: |
          $exe = Join-Path "dist" "$env:APP_NAME.exe"
          if (!(Test-Path $exe)) { throw "EXE missing after build" }
          # CI: shrink banner; answer "N" to log cleanup prompt
          $env:NO_FIGLET = '1'
          Copy-Item -LiteralPath "settings.example.yml" -Destination "settings.yml" -Force
          New-Item -ItemType Directory -Force -Path "logs" | Out-Null
          "N" | & $exe --info
          if ($LASTEXITCODE -ne 0) { throw "Non-zero exit code: $LASTEXITCODE" }

      - name: Install Inno Setup (ISCC)
        shell: pwsh
        run: |
          choco install innosetup --no-progress -y

      - name: Build installer (.exe) with Inno Setup
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}"
          if (-not $version -or -not $version.StartsWith("v")) { $version = "dev-${{ github.run_number }}" }
          $iscc = "${Env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (!(Test-Path $iscc)) { $iscc = "${Env:ProgramFiles}\Inno Setup 6\ISCC.exe" }
          if (!(Test-Path $iscc)) { throw "ISCC.exe not found" }
          & "$iscc" "/DAppVersion=$version" "$env:ISS_SCRIPT"
          if ($LASTEXITCODE -ne 0) { throw "ISCC failed with exit code $LASTEXITCODE" }

      - name: Locate installer output
        id: locate
        shell: pwsh
        run: |
          $file = Get-ChildItem -Recurse -File -Filter 'rf2k-trainer_Setup_*.exe' | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $file) { throw "Installer not found after ISCC build" }
          "installer_path=$($file.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Upload installer artifact (for CI)
        uses: actions/upload-artifact@v4
        with:
          name: win-installer
          path: ${{ steps.locate.outputs.installer_path }}

      - name: Release on tag (attach installer only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.locate.outputs.installer_path }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
